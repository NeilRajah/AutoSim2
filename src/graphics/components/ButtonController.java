/**
 * ButtonController
 * Author: Neil Balaskandarajah
 * Created on: 21/03/2020
 * Versatile controller for a button component
 */

package graphics.components;

import java.awt.Cursor;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.Timer;
import java.util.TimerTask;

import graphics.components.BoxButton.BUTTON_STATE;
import util.Util;

public class ButtonController implements MouseListener {
	//Attributes
	private BoxButton button; //button to control
	private Runnable method; //method to run when clicked
	private final long BOUNCE_TIME = 100; //time to wait for another press in ms
	private boolean inputLock; //whether user input is locked or not
	private Timer timer; //timer for the input lock
	private TimerTask turnLockOff; //task to turn the lock off
	private Runnable[] actions; //actions to run along with method
	
	/**
	 * Create a controller for the button
	 * @param button Button to control
	 * @param method Method to run when presed
	 */
	public ButtonController(BoxButton button, Runnable method) {
		//set attributes
		this.button = button;
		this.method = method;
		this.inputLock = false;
		this.timer = new Timer();
//		this.turnLockOff = ;
	}
	
	/**
	 * Create a controller for the button
	 * @param button Button to control
	 */
	public ButtonController(BoxButton button) {
		this(button, null);
	}
	
	public void addRunnables(Runnable ... r) {
		this.actions = r;
	}

	/**
	 * Change the color to dark when the mouse enters
	 * @param m MouseEvent generated by interface
	 */
	public void mouseEntered(MouseEvent m) {
		button.setState(BUTTON_STATE.HOVER);
		button.setCursor(new Cursor(Cursor.HAND_CURSOR));
	}

	/**
	 * Change the color to light when the mouse leaves
	 * @param m MouseEvent generated by interface
	 */
	public void mouseExited(MouseEvent m) {
		button.setState(BUTTON_STATE.DEFAULT);
		button.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
	}

	/**
	 * Change the color to a darker dark when the mouse is pressed
	 * @param m MouseEvent generated by interface
	 */
	public void mousePressed(MouseEvent m) {
		button.setState(BUTTON_STATE.LOCK);		
		
		//if the method exists and hasn't ran
		if (method != null && !inputLock) {
			this.inputLock = true;
			TimerTask t = Util.task(() -> {inputLock = false;});
			timer.schedule(t, BOUNCE_TIME);
			if (actions != null) 
				Util.runRunnables(actions);
			method.run();
		} 
	} 

	/**
	 * Change the color back to light when the mouse is releaed
	 * @param m MouseEvent generated by interface
	 */
	public void mouseReleased(MouseEvent m) {
		button.setState(BUTTON_STATE.HOVER);		
	} 
	
	/*
	 * Unimplemented
	 */
	public void mouseClicked(MouseEvent m) {}
} 
